# Generated by Django 5.1.1 on 2025-02-13 10:19

from django.db import migrations


def load_artifacts(apps, schema_editor):
    QueryVQL = apps.get_model("Make_hunts", "QueryVQL")
    file_path = "Make_hunts/fixtures/artifacts.txt"

    # Инициализация переменных для артефакта
    artifact_name = None
    artifact_query = []

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()

        # Чтение файла построчно
        for line in lines:
            line = line.strip()  # Убираем лишние пробелы и символы новой строки
            if not line:
                continue  # Пропускаем пустые строки

            if line.startswith("name:"):
                # Если встречаем строку с name, сохраняем текущий артефакт в БД
                if artifact_name:
                    query_vql = "\n".join(artifact_query)  # Собираем всё тело запроса
                    QueryVQL.objects.get_or_create(
                        name=artifact_name,
                        defaults={"query_vql": query_vql},
                    )

                # Начинаем новый артефакт
                artifact_name = line.split(":", 1)[1].strip()  # Извлекаем имя артефакта
                artifact_query = []  # Сброс содержимого запроса

            else:
                # Добавляем текущую строку в запрос
                artifact_query.append(line)

        # Не забываем сохранить последний артефакт
        if artifact_name:
            query_vql = "\n".join(artifact_query)
            QueryVQL.objects.get_or_create(
                name=artifact_name,
                defaults={"query_vql": query_vql},
            )

        print(f"✅ Загружено артефактов из файла")
    except Exception as e:
        print(f"❌ Ошибка загрузки артефактов: {e}")

class Migration(migrations.Migration):

    dependencies = [
        ('Make_hunts', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_artifacts),
    ]
